
import zipfile
import pathlib
from collections import namedtuple



class SessionStore():

    # to bet defined by caller ..
    # zip_file = pathlib.Path('kivy_data_folder', 'session_store.archive') 
    
    def __init__(self, archive_file) -> None:
        self.archive_file = pathlib.Path(archive_file)
        self.session_cache : list[dict[str: str]] = None

        with zipfile.ZipFile(self.archive_file, mode='a') as z_f:
            # any pending rst files? (previous app crash or not properly closed)
            for rst_file in self.archive_file.parent.iterdir():
                if rst_file.suffix == '.rst' and rst_file.is_file():
                    z_f.write(rst_file)
            

        self.session_cache = [{name: None} for name in sorted(z_f.namelist())]

        # non existant or corrupt archive file
        if not self.archive_file.exists() or not zipfile.is_zipfile(self.archive_file):
            self.session_files = []
        else:
            pass

        self.current_idx = 43


        def get_session(idx):

            if self.session_cache.get(idx):
                return self.session_cache[idx]
            else:
                if idx > len(self.session_cache) - 1: 
                    # go get content in zip file
                    pass